---
layout: post
title: "Combine: The ultimate framework"
date:   2020-07-19 12:02:05 +0100
categories: coding
author: Javier Carrillo
permalink: /:categories/:day/:month/:year/:title.html
published: true
tags: coding
---
If you have experience developing iOS Apps you may know that the some task inside the App must wait for other tasks to be completed or that the App needs to process some task in a proper order. Handle with these sort of tasks could be tricky, but in WWDC2029 Apple released the ultimate framework for this purpose: Combine. Combine is a declarative framework for processing values over time, like network response, user interface events on a bunch of other types of asynchronous data.

In order to master Combine it is vital to understand following three basic concepts:
* Publishers:
    * Defines how values and errors are produced
    * Value type -> `Struct`
    * Allows registration of a `Subscriber`
* Subscribers:
    * Recieves values and a completion -> `map`, `flatMap`, `filter`, `reduce`, ...
    * Reference type
* Operators

<br>
<img style="display: block; margin-left: auto; margin-right: auto; width: 100%; object-fit: contain; border-radius: 20px" src="/assets/img/combineStructure.png">
<p style="text-align: center">Source: Apple Inc. (WWDC 2019)</p>
<br>

Basically a `Publisher` generates values that can change on which a `Subscriber` subscribes to receive all those updates. If you've been working lately with SwiftUI you may have use Property Wrappers like `ObservableObject`, `@EnvironmentObject`, `@Binding` and so on, those property wrappers use Combine framework in the background.

In this short tutorial we are going to explain basic concepts of Combine in a hands-on approach by building a URL JSON request, which I think is widely used in the most of the Apps. It is not necessary to configure a server end-points for this, I strongly recommend using Postman Mock Server for that. Fistly I'm going to show you how I used to build the request without Combine, the old school version, and then I will show you how to perfom it with Combine. Please, bear in mind that the magic of coding is that there are many ways to achieve the same result so this is just the way I do.

<br>
<h2 style="color: #403F3F">Old-School URL Session</h2>
Lets imagine that we want to get a JSON with the list of users

```swift
struct User: Codable {
    let id: Int
    let name: String
    let surename: String
    let company: String
}
```

```swift
func fetchUsers(url: URL) {
    let session = URLSession.shared //URLSession singleton
    let request = URLRequest(url: url)
    session.dataTask(with: request) { (data, response, error) in
        guard let data = data, let response = response as? HTTPURLResponse, error == nil else {
            if let error = error {
                print("Conection error: \(error.localizedDescription)")
            }
            return
        }
        if response.statusCode == 200 {
            let decoder = JSONDecoder()
            do {
                let users = try decoder.decode([User].self, from: data)
                for user in users {
                    print(user.id, user.name, user.surename, user.company)
                }
            } catch {
                print("Serialization error: \(error.localizedDescription)")
            }
        }
    }.resume()
}
```

<br>
<h2 style="color: #403F3F">URL Session with Combine</h2>
With combine is much easier and intuitive:

```swift
let request = URLRequest(url: url)
    let publisher = URLSession.shared
        .dataTaskPublisher(for: request)
        .tryMap {
            guard let response = $1 as? HTTPURLResponse, response.statusCode == 200 else {
                throw NetworkErrors.BadContent
            }
            return $0
        }
        .decode(type: [User].self, decoder: JSONDecoder())
        .sink(receiveCompletion: { completion in
            switch completion {
                case .failure(let failure): print("Error: \(failure)")
                case .finished: print("Done")
            }
        }, receiveValue: {
            for user in $0 {
                print(user.id, user.name, user.surename, user.company)
            }
        })
```

Thanks for reading :)

<table style="width: 100%; overflow: scroll; border-right: 0px solid gray; border-left: 0px solid gray">
    <tr style="border-right: 0px solid gray; border-left: 0px solid gray">
        <td style="width: 20%; border-top: 2px solid #DDDDDD; border-left: 0px solid gray; border-right: 0px solid gray; border-bottom: 0px solid gray; text-align: center; vertical-align: center; padding: 0px">
            <p style="color: #A8A8A8; font-size: 20px; margin: 0px 0px"><b>Written By</b></p>
        </td>
        <td style="border-top: 2px solid #DDDDDD; border-left: 0px solid gray; border-right: 0px solid gray; border-bottom: 0px solid gray; text-align: center; vertical-align: center; padding: 0px">
            <p style="color: #A8A8A8; font-size: 20px"><b></b></p>
        </td>
    </tr>
    <tr style="border-right: 0px solid gray; border-left: 0px solid gray">
        <td style="border-top: 0px solid gray; border-left: 0px solid gray; border-right: 0px solid gray; border-bottom: 2px solid #DDDDDD; color: gray; font-size: 20px; background-color: #FDFDFD; text-align: center; vertical-align: center; horizontal-align: center; padding: 5px">
        <img style="display: block; margin-left: auto; margin-right: auto; width: 100%; object-fit: contain" src="/assets/img/yo.png">
        </td>
        <td style="border-top: 0px solid gray; border-left: 0px solid gray; border-right: 0px solid gray; border-bottom: 2px solid #DDDDDD; background-color: #FDFDFD; text-align: left; vertical-align: center; padding: 10px">
            <p style="font-size: 26px; margin: 0px 0px"><b>Javi Carrillo</b></p>
            <p style="font-size: 18px">In the past I developed car's powertrain control software. Now I develope mobile apps for many purposes.</p>
        </td>
    </tr>
</table>




